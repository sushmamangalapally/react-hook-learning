{"version":3,"sources":["logo.svg","tables/UserTable.js","forms/AddUserForm.js","forms/EditUserForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","UserTable","props","react_default","a","createElement","users","length","map","user","key","id","name","username","onClick","editRow","className","deleteUser","colSpan","AddUserForm","initialFormState","_useState","useState","_useState2","Object","slicedToArray","setUser","handleInputChange","event","_event$target","target","value","objectSpread","defineProperty","onSubmit","preventDefault","addUser","type","onChange","EditUserForm","currentUser","useEffect","updateUser","setEditing","App","setUsers","_useState3","_useState4","editing","_useState5","_useState6","setCurrentUser","forms_EditUserForm","updatedUser","forms_AddUserForm","concat","toConsumableArray","tables_UserTable","filter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c66be79.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nconst UserTable = props => (\n    <table>\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Username</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {props.users.length > 0 ? (\n                props.users.map(user => (\n                    <tr key={user.id}>\n                        <td>{user.name}</td>\n                        <td>{user.username}</td>\n                        <td>\n                            <button onClick = {() => props.editRow(user)} className=\"button muted-button\">Edit</button>\n                            <button onClick = {() => props.deleteUser(user.id)} className=\"button muted-button\">Delete</button>\n                        </td>\n                    </tr>\n                ))\n            ) : (\n                <tr>\n                    <td colSpan={3}>No Users</td>\n                </tr>\n            )}\n        </tbody>\n    </table>\n)\n\nexport default UserTable","import React, { useState } from 'react'\n\nconst AddUserForm = props => {\n    const initialFormState = {id: null, name: '', username: ''}\n    const [user, setUser] = useState(initialFormState)\n\n    const handleInputChange = event => {\n        const {name, value} = event.target\n\n        setUser({ ...user, [name]: value})\n    }\n\n    return (\n        <form\n        onSubmit={event => {\n          event.preventDefault()\n          if (!user.name || !user.username) return\n      \n          props.addUser(user)\n          setUser(initialFormState)\n        }}>\n            <label>Name</label>\n            <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange}/>\n            <label>Username</label>\n            <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange}/>\n            <button>Add new user</button>\n        </form>\n    )\n}\n\nexport default AddUserForm","import React, { useState, useEffect } from 'react'\n\nconst EditUserForm = props => {\n    const [user, setUser] = useState(props.currentUser)\n    \n    useEffect(() => {\n        setUser(props.currentUser)\n      }, [props])\n      \n    const handleInputChange = event => {\n        const { name, value } = event.target\n\n        setUser({ ...user, [name]: value})\n    }\n    return (\n        <form\n            onSubmit={event => {\n            event.preventDefault()\n    \n            props.updateUser(user.id, user)\n            }}\n            \n        >\n            <label>Name</label>\n            <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange}/>\n            <label>Username</label>\n            <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange}/>\n            <button>Update user</button>\n            <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\n                Cancel\n            </button>\n        </form>\n    )\n}\n\nexport default EditUserForm","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport UserTable from './tables/UserTable'\nimport AddUserForm from './forms/AddUserForm'\nimport EditUserForm from './forms/EditUserForm'\n\nconst App = () => {\n    const usersData = [\n        { id: 1, name: 'Lily', username: 'floppydisk'},\n        {id: 2, name: 'Glenn', username: 'silicon'},\n        {id: 3, name: 'Sosa', username: 'university'}\n    ]\n\n    const [users, setUsers] = useState(usersData)\n\n    const addUser = user => {\n        user.id = user.length + 1\n        setUsers([...users, user])\n        /*\n            This function will take a user object\n            as a parameter, and add them to the users\n            array of objects. The ...users code\n            ensures that all the previous users\n            remain in the array.\n        */\n    }\n\n    const deleteUser = id => {\n        setUsers(users.filter(user => user.id !== id))\n    }\n\n    const [editing, setEditing] = useState(false)\n\n    const initialFormState = { id: null, name: '', username: ''}\n\n    const [currentUser, setCurrentUser] = useState(initialFormState)\n\n    const editRow = user => {\n        setEditing(true)\n\n        setCurrentUser({ id: user.id, name: user.name, username: user.username })\n    }\n\n    const updateUser = (id, updatedUser) => {\n        setEditing(false)\n\n        setUsers(users.map(user => (user.id === id ? updatedUser : user)))\n    }\n\n    return (\n        <div className=\"container\">\n            <h1>CRUD App with Hooks</h1>\n            <div className=\"flex-row\">\n                <div className=\"flex-large\">\n                    {editing ? (\n                        <div>\n                            <h2>Edit user</h2>\n                            <EditUserForm\n                                editing={editing}\n                                setEditing={setEditing}\n                                currentUser={currentUser}\n                                updateUser={updateUser}\n                            />\n                        </div>\n                    ) : (\n                        <div>\n                            <h2>Add user</h2>\n                            <AddUserForm addUser={addUser} />\n                        </div>\n                    )}\n                </div>\n                <div className=\"flex-large\">\n                    <h2>View user</h2>\n                    <UserTable users={users} editRow={editRow} deleteUser={deleteUser}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}